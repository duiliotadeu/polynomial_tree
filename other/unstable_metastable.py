def unstable_metastable(maximals, edges):
    maximals_copy = [set(maximal) for maximal in maximals]

    for i, maximal in enumerate(maximals_copy):
        maximal_copy = set(maximal.copy())
        unstable = 0

        for element in maximal:
            if unstable == 1:
                continue

            edge_counter = 0

            for edge in edges[element - 1]:
                if unstable == 1:
                    continue

                if edge:
                    if edge_counter + 1 not in maximal:

                        valid = 1

                        new_maximal = maximal_copy - {element}

                        for element_new in new_maximal:
                            if edges[element_new-1][edge_counter] :
                                #print(f'{element} - {element_new} - {edge_counter+1}\n')
                                valid = 0

                        new_maximal.add(edge_counter + 1)

                        if valid == 1:

                            if new_maximal in maximals_copy:
                                valid = 0
                                
                            if valid == 1 :
                                unstable = 1
                                print(f'{maximal}: Instável')
                                #print(f'{new_maximal}: Variado\n')

                edge_counter += 1

        if not unstable:
            print(f'{maximal}: Metaestável')            

edges = [
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]

maximals = [
    { 1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 15, 16, 17, },
{ 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 15, 16, 18, },
{ 1, 2, 3, 4, 5, 8, 9, 10, 12, 13, 14, 16, 30, },
{ 1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 29, },
{ 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 14, 15, 21, },
{ 1, 2, 3, 5, 8, 9, 11, 12, 13, 14, 15, 16, 31, },
{ 1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 22, },
{ 1, 2, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 32, },
{ 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 16, 23, },
{ 1, 3, 4, 5, 7, 8, 9, 12, 13, 14, 15, 16, 19, },
{ 1, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 26, },
{ 1, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 27, },
{ 1, 17, 18, 19, 21, 22, 23, 26, 27, 29, 30, 31, 32, },
{ 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 24, },
{ 2, 3, 4, 6, 7, 8, 10, 11, 13, 14, 15, 16, 20, },
{ 2, 3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 25, },
{ 2, 3, 5, 6, 8, 9, 10, 11, 12, 14, 15, 16, 28, },
{ 2, 17, 18, 20, 21, 22, 24, 25, 28, 29, 30, 31, 32, },
{ 3, 17, 18, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, },
{ 4, 17, 18, 19, 20, 22, 23, 24, 26, 27, 29, 30, 32, },
{ 5, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 30, 31, },
{ 6, 17, 18, 20, 21, 22, 24, 25, 26, 27, 28, 29, 32, },
{ 7, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 32, },
{ 8, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 30, 31, },
{ 9, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, },
{ 10, 17, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, },
{ 11, 17, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, },
{ 12, 18, 19, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, },
{ 13, 17, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 32, },
{ 14, 18, 19, 20, 21, 24, 25, 26, 28, 29, 30, 31, 32, },
{ 15, 17, 18, 19, 20, 21, 24, 25, 27, 28, 29, 31, 32, },
{ 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 30, 31, 32, },
]

unstable_metastable(maximals, edges)